README
## 飲食店予約サービスアプリ

## アプリケーションURL README/img/pageディレクトリ内に各ページの画像あり

ログインページの画像/login.png
・http://localhost/login
会員登録ページの画像/register.png
・http://localhost/register
認証メール確認ページの画像/verify-email.png
・http://localhost/emailverify
パスワード再設定用メール送信ページの画像/forgot-password.png
・http://localhost/forgot-password
パスワード再設定ページの画像/reset-password.png
・http://localhost/forgot-password/~

管理者ユーザー管理ページの画像/admin.png
・http://localhost/admin
管理者口コミ一覧ページの画像/admin_review.png
・http://localhost/admin/reviews
管理者店舗情報作成ページの画像/admin_shop.png
・http://localhost/admin/shop

店舗情報作成・更新ページの画像/owner.png
・http://localhost/owner
店舗予約情報確認ページの画像/owner_reserve.png
・http://localhost/owner_reserve
QRコード読み込みページの画像/owner_qrcode.png
・http://localhost/owner/qrcode
個人予約情報確認ページの画像/show.png
・http://localhost/reservations/{reserve}

店舗一覧ページの画像/shops.png
・http://localhost/
店舗詳細ページの画像/detail_shop.png
・http://localhost/shops/{shop}
予約完了ページの画像/done.png
・http://localhost/done
マイページの画像/mypage.png
・http://localhost/mypage
予約情報変更ページの画像/reservation_edit.png
・http://localhost/edit
口コミページの画像/review.png
・http://localhost/
決済ページの画像/payment.png
・http://localhost/review/{reserve}
お支払い完了ページの画像/thanks.png
・http://localhost/thanks

## 他のリポジトリ
github URL:https://github.com/kijima-masaru/rese-ui.git

## 機能一覧

●ユーザーには管理者・店舗代表者・利用者の3種類のroleが存在します。以下はテスト用の3種類のアカウント(メールアドレスとパスワード)です。

$ docker-compose exec php bash
$ php artisan migrate
$ php artisan db:seed

・上記のコマンドでDBを作成した後、シーディングを行うとメール認証済みのテスト用アカウントが作成されます。
管理者:admin@example.com、11111111
店舗代表者:owner@example.com、22222222
一般ユーザー:user@example.com、33333333

※fortifyを使用したログイン、新規登録、パスワード再設定機能を実装しています。
●ログインページ
・登録しているメールアドレスとパスワードを使用してログインすることができます。
・アカウントのrole(管理者・店舗代表者・利用者)によってログイン後のリダイレクト先が違います。
●会員登録ページ
・名前、メールアドレス、パスワードを使用して会員登録することができます。メールアドレスは登録されているものは使用できません。
・登録したメールアドレス宛てに認証メールが送信されます。送られたメールから認証を行わないと会員登録は完了しません。
●パスワード再設定用メール送信ページ
・登録したメールアドレスを入力し、パスワードを再設定するためのメールを送信できます。送られたメールからパスワード再設定ページに移動することができます。
●パスワード再設定ページ
・登録したメールアドレスと新しいパスワードを入力することでパスワードを再設定できます。

●管理者ユーザー一覧ページ
・roleが管理者のユーザーがログインするとリダイレクトします。
・登録されているユーザーのroleを管理者・店舗代表者・利用者の3種類に変更できます。
・ユーザーの名前からユーザーを検索できます。
●管理者口コミ一覧ページ
・ユーザーが投稿した口コミを閲覧、削除できます。
・ユーザーの名前から口コミを検索できます。
●管理者店舗情報作成ページ
・CSVファイルをインポートすることで店舗情報を作成することができます。

※CSVファイルの記述方法
・以下のような順番でCSVファイルに記述してください。(テンプレートがREADMEディレクトリにあります。)

店舗名(50文字以内),エリア(東京都,大阪府,福岡県のみ),ジャンル(寿司,焼肉,イタリアン,居酒屋,ラーメンのみ),概要(400字以内),画像のURL(jpeg,pngのみ)

●店舗情報作成・更新ページ
・roleが店舗代表者のユーザーがログインするとリダイレクトされます。
・新しく店舗情報の作成ができます。作成した店舗情報はDBのreservesテーブルに保存されます。また、アップロードした画像はストレージに保存されます。
・登録済みの店舗情報を更新することができます。DBのreservesテーブルやストレージの画像も更新されます。
●店舗予約情報確認ページ
・登録している店舗の予約を確認することができます。(reservesテーブルのstatusカラムの値がbeforeのもののみ表示されます。)
・お知らせメールボタンからお知らせメールを送信できます。お知らせメールの内容は、reservation_notification.blade.phpで編集できます。
・お客様がご来店された際にご来店後対応ボタンを押すことで、お客様がレビューを投稿できるようになります。(reservesテーブルのstatusカラムの値をbeforeからafterに変更している。)
●QRコード読み込みページ
・QRコードを読み込むことで特定の予約情報を閲覧できる個人予約情報確認ページにリダイレクトされます。
●個人予約情報確認ページ
・QRコード読み込みページで読み込んだ個人予約情報を閲覧できます。

●店舗一覧ページ
・roleが利用者のユーザーがログインするとリダイレクトされます。
・店舗が一覧で表示されています。
・エリア、ジャンル、店名で一致する店舗を検索することができます。
・各店舗の「詳しく見る」ボタンを押すことで、店舗詳細ページに移動できます。
・「お気に入り追加」「お気に入り解除」ボタンを押すことで、お気に入り登録・解除が行えます。
・ソート機能を使用して店舗情報をランダム、評価の高い順、評価の低い順で並べ替えることができます。
●店舗詳細ページ
・店舗の詳細を確認することができます。
・日付、時間、人数を選択して予約することができます。
・店舗に対する口コミを閲覧することができます。
・ソート機能を使用して口コミをランダム、評価の高い順、評価の低い順で並べ替えることができます。
●マイページ
・自身の予約情報とお気に入り店舗を確認することができます。
・「予約内容変更」ボタンを押すことで、予約内容変更ページにリダイレクトできます。(reservesテーブルのstatusカラムがbeforeの場合のみ表示されます。)
・「予約削除」ボタンを押すことで、予約をキャンセルすることができます。(reservesテーブルのstatusカラムがbeforeの場合のみ表示されます。)
・「レビュー投稿」ボタンを押すことでレビューページにリダイレクトできます。(reservesテーブルのstatusカラムがafterの場合のみ表示されます。)
・予約情報をQRコード化しています。(店舗代表者はQRコード読み込みページで読み込むことで、閲覧することができます。)
・お気に入り登録済みの店舗の店舗詳細ページにリダイレクトできます。またお気に入り解除ができます。
●予約情報変更ページ
・予約した情報(日付、時間、人数)を再度選択して、予約情報を変更することができます。
●口コミページ
・1~5の5段階評価、コメント、画像を入力して口コミを投稿することができます。(５段階評価、コメントは必須、画像は任意です。)
・ユーザーは1つの店舗につき1つまで口コミを投稿できます。すでに投稿した口コミに対しては内容を更新・削除することができます。
●決済ページ
・stripeを使用した決済を行うことができます。
・「決済をする」ボタンを押すことで決済フォームが表示されます。フォームにメールアドレス、クレジットカード情報を入力して支払いを行うことができます。

●その他の機能
・ヘッダーから該当ページへの移動、ログアウトを行うことができます。ヘッダーは画面上部に固定されているため、スクロールしても常に画面上に表示されます。
・タスクスケジューラーを使用して、予約日当日の朝9:00に登録したメールアドレス宛てにリマインダーメールが送信されます。


## 使用技術
Laravel8.83.8（php,mysql,html,css）

## テーブル設計 README/img/tableディレクトリ内に画像あり
●usersテーブル：会員登録したユーザーの情報用のテーブル
●shopsテーブル：店舗情報用のテーブル
●areasテーブル：店舗のエリア用テーブル
●genresテーブル：店舗のジャンル用テーブル
●reservesテーブル：予約情報用のテーブル
●favoritesテーブル：お気に入り登録用のテーブル
●reviewsテーブル：レビュー内容用のテーブル

## ER図
・README/ERディレクトリ下にある画像を参照

## 環境構築

##開発環境の.envファイル
APP_NAME=Laravel
APP_ENV=local
APP_KEY=base64:2AJhmn7ow8rKejSk3b2X6S6owlW75HWgtEixMusNCqU=
APP_DEBUG=true
APP_URL=http://localhost

LOG_CHANNEL=stack
LOG_DEPRECATIONS_CHANNEL=null
LOG_LEVEL=debug

DB_CONNECTION=mysql
DB_HOST=mysql
DB_PORT=3306
DB_DATABASE=laravel_db
DB_USERNAME=laravel_user
DB_PASSWORD=laravel_pass

BROADCAST_DRIVER=log
CACHE_DRIVER=file
FILESYSTEM_DRIVER=local
QUEUE_CONNECTION=database
SESSION_DRIVER=file
SESSION_LIFETIME=120

MEMCACHED_HOST=127.0.0.1

REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_MAILER=smtp
MAIL_HOST=sandbox.smtp.mailtrap.io
MAIL_PORT=2525
MAIL_USERNAME=7fa10b88345cf7
MAIL_PASSWORD=8f43bbe353c2ea

AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET=
AWS_USE_PATH_STYLE_ENDPOINT=false

PUSHER_APP_ID=
PUSHER_APP_KEY=
PUSHER_APP_SECRET=
PUSHER_APP_CLUSTER=mt1

MIX_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
MIX_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"

STRIPE_KEY=pk_test_51NjMYZHuosYE03blXTaFQPxuno5yZsJcyjw9F4x8jXwK7SgnWJHOD52SGcoRnLG8CJQPsPkchciE4EI5EjliMojw00o8XjGnDm
STRIPE_SECRET=sk_test_51NjMYZHuosYE03bl4HVIfgB3xpYUhte3Oe1gjMAj4Al7qFFohmIIWvIdNj5kSP8AR5M96L5njVGjNO8YIxg3mmoO00kgEWRpDz

##本番環境の.envファイル
APP_NAME=Laravel
APP_ENV=local
APP_KEY=下記で作成
APP_DEBUG=true
APP_URL=http://18.183.254.50/

LOG_CHANNEL=stack
LOG_DEPRECATIONS_CHANNEL=null
LOG_LEVEL=debug

DB_CONNECTION=mysql
DB_HOST=database-1.c9k9ndmu64fu.ap-northeast-1.rds.amazonaws.com
DB_PORT=3306
DB_DATABASE=database-1
DB_USERNAME=admin
DB_PASSWORD=masaru9090

BROADCAST_DRIVER=log
CACHE_DRIVER=file
FILESYSTEM_DRIVER=local
QUEUE_CONNECTION=database
SESSION_DRIVER=file
SESSION_LIFETIME=120

MEMCACHED_HOST=127.0.0.1

REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_MAILER=smtp
MAIL_HOST=sandbox.smtp.mailtrap.io
MAIL_PORT=2525
MAIL_USERNAME=7fa10b88345cf7
MAIL_PASSWORD=8f43bbe353c2ea

AWS_ACCESS_KEY_ID=AKIAVDDMZEVJY3T5HNM3
AWS_SECRET_ACCESS_KEY=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
AWS_DEFAULT_REGION=ap-northeast-1
AWS_BUCKET=rese-ui-s3
AWS_USE_PATH_STYLE_ENDPOINT=false

PUSHER_APP_ID=
PUSHER_APP_KEY=
PUSHER_APP_SECRET=
PUSHER_APP_CLUSTER=mt1

MIX_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
MIX_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"

STRIPE_KEY=pk_test_51NjMYZHuosYE03blXTaFQPxuno5yZsJcyjw9F4x8jXwK7SgnWJHOD52SGcoRnLG8CJQPsPkchciE4EI5EjliMojw00o8XjGnDm
STRIPE_SECRET=sk_test_51NjMYZHuosYE03bl4HVIfgB3xpYUhte3Oe1gjMAj4Al7qFFohmIIWvIdNj5kSP8AR5M96L5njVGjNO8YIxg3mmoO00kgEWRpDz

##本番環境導入の手順

●EC2とのリモート接続
$ mkdir ~/.ssh #.sshディレクトリの作成
$ mv Downloads/キー.pem .ssh/ #mvコマンドで「キー.pem」を.sshディレクトリに移動
$ cd .ssh/ #.sshディレクトリに移動
.ssh $ ls #キー.pemが.sshディレクトリに存在するか確認
.ssh $ chomd 400 キー.pem #キーファイルのパーミッションを変更
.ssh $ ssh -i "キー.pem" ec2-user@ec2-54-178-37-178.ap-northeast-1.compute.amazonaws.com #ログイン(AWS接続画面のコードをコピペする。ログインすると以下のように表示される。初回の場合はセキュリティ警告が出るため、yesと答える。)


       __|  __|_  )
       _|  (     /   Amazon Linux 2 AMI
      ___|\___|___|

●nginxのセットアップ(ec2インスタンス上でコマンドを実行)
$ sudo amazon-linux-extras enable nginx1
$ sudo yum -y install nginx #インストール
$ nginx -v #バージョン確認
$ sudo systemctl enable nginx #nginx自動起動化
$ sudo systemctl start nginx.service #起動
$ sudo systemctl status nginx.service #起動確認(runningになっているか確認)

●RDSの接続(ec2インスタンス上でコマンドを実行)
$ sudo yum update -y #パッケージのアップデート
$ sudo yum -y install mysql git httpd curl #MySQL、Git、Apache、cURLをインストール
$ sudo systemctl start nginx.service #nginx起動
$ sudo systemctl status nginx.service #nginx起動確認
$ mysql -h database-1.c9k9ndmu64fu.ap-northeast-1.rds.amazonaws.com -P 3306 -u admin -p #mysqlにログインできれば成功(パスワードはmasaru9090)

●Laravelの起動(ec2インスタンス上でコマンドを実行)
#設定するユーザー名とEmailアドレスは自身のGithubアカウントに登録しているデータを入力してください。
$ git config --global user.name "ユーザー名" #gitのユーザー名を設定
$ git config --global user.email メールアドレス #gitのEmailアドレスを設定(メールアドレスにダブルクォーテーションはいりません。)
$ sudo amazon-linux-extras install -y php7.4 #amazon-linux-extrasコマンドを利用してPHPをインストール
$ curl -sS https://getcomposer.org/installer | php #Composerをインストール
$ sudo mv composer.phar /usr/local/bin/composer #パスを通す
$ cd /var/www #Laravelのプロジェクトを/var/wwwディレクトリ以下に配置
[www]$ sudo chown ec2-user:ec2-user /var/www #/var/wwwディレクトリの所有者とグループを変更
[www]$ git clone https://github.com/kijima-masaru/rese-ui.git #デプロイしたいLaravelのプロジェクトをclone(今回は飲食店予約サービスアプリのプロジェクト)
[www]$ sudo yum install -y php-xml #Composerのパッケージをインストールするために必要なライブラリをインストール
[www]$ sudo yum install php php-devel php-opcache php-mbstring php-xml #必要な拡張機能をインストール
[www]$ sudo systemctl start php-fpm.service #php-fpmの起動
[www]$ sudo systemctl enable php-fpm.service #php-fpmを自動で起動するように設定
[www]$ systemctl status php-fpm.service #起動しているか確認

●php-fpmの設定
$ sudo su - #viモードはrootユーザーでないとファイルに書き込みができないので、書き込みをするときはec2ユーザーからrootユーザーにスイッチ
[root]$ cd /etc/php-fpm.d/
[root]$ sudo cp www.conf www.conf_bk_yyyyMMdd #念の為バックアップ
[root]$ vi www.conf
#viで開いたら、「i」で挿入モードにして以下の箇所を変更。変更したら「etc」で通常モードにして「:wq」で保存して終了。

### 24行目あたり ###
# 変更前
user = apache
# 変更後
user = nginx

### 26行目あたり ###
# 変更前
group = apache
# 変更後
group = nginx

### 48行目あたり ###
# 変更前
;listen.owner = nobody
# 変更後
listen.owner = nginx

### 49行目あたり ###
# 変更前
;listen.group = nobody
# 変更後
listen.group = nginx

### 50行目あたり ###
# 変更前
;listen.mode = 0660
# 変更後
listen.mode = 0660

●nginxの設定
[root]$ ls -l /etc | grep nginx #nginx関係のファイルの位置を確認(おそらく/etc下にあります。)
[root]$ vi /etc/nginx/nginx.conf #nginx.confの編集(書き方を間違えるとnginxが起動しなくなります。今回は以下の記述を使用しました。)

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 4096;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;

    server {
        listen       80;
        listen       [::]:80;
        server_name  _;
        root         /var/www/laravel-zaikokanri/backend/public;

        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-Content-Type-Options "nosniff";

        index index.php;

        charset utf-8;

        location / {
            try_files $uri $uri/ /index.php?$query_string;
        }

        location ~ \.php$ {
            fastcgi_pass   unix:/run/php-fpm/www.sock;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;
            include        fastcgi_params;
        }

        location ~ /\.(?!well-known).* {
            deny all;
        }

        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;

        error_page 404 /404.html;
            location = /404.html {
        }

        error_page 500 502 503 504 /50x.html;
            location = /50x.html {
        }
    }
}

[root]$ sudo systemctl start nginx.service #nginx起動
[root]$ sudo systemctl status nginx.service #起動状態確認

●.envファイルの作成とAPP_KEYの生成
[root@www]$ cd rese-ui

※composerのインストール
[root@rese-ui]$ https://getcomposer.org/download/ のコマンド4つを実行してcomposerをインストール
[root@rese-ui]$ sudo mv composer.phar /usr/local/bin/composer #composerの実行ファイルを移動
[root@rese-ui]$ php /usr/local/bin/composer #composerの実行ファイルを実行
[root@rese-ui]$ echo "export PATH=~/.config/composer/vendor/bin:$PATH" >> ~/.bash_profile
[root@rese-ui]$ source ~/.bash_profile #パスを通す
[root@rese-ui]$ composer #コマンドにパスが通ったことを確認(下記のようになります。)

   ______
  / ____/___  ____ ___  ____  ____  ________  _____
 / /   / __ \/ __ `__ \/ __ \/ __ \/ ___/ _ \/ ___/
/ /___/ /_/ / / / / / / /_/ / /_/ (__  )  __/ /
\____/\____/_/ /_/ /_/ .___/\____/____/\___/_/
                    /_/
Composer version 2.6.2 2023-09-03 14:09:15

Usage:
  command [options] [arguments]

Options:
  -h, --help                     Display help for the given command. When no command is given display help for the list command
  -q, --quiet                    Do not output any message
  -V, --version                  Display this application version
      --ansi|--no-ansi           Force (or disable --no-ansi) ANSI output
  -n, --no-interaction           Do not ask any interactive question
      --profile                  Display timing and memory usage information
      --no-plugins               Whether to disable plugins.
      --no-scripts               Skips the execution of all scripts defined in composer.json file.
  -d, --working-dir=WORKING-DIR  If specified, use the given directory as working directory.
      --no-cache                 Prevent use of the cache
  -v|vv|vvv, --verbose           Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug

Available commands:
  about                Shows a short information about Composer
  archive              Creates an archive of this composer package
  audit                Checks for security vulnerability advisories for installed packages
  browse               [home] Opens the package's repository URL or homepage in your browser
  bump                 Increases the lower limit of your composer.json requirements to the currently installed versions
  check-platform-reqs  Check that platform requirements are satisfied
  clear-cache          [clearcache|cc] Clears composer's internal package cache
  completion           Dump the shell completion script
  config               Sets config options
  create-project       Creates new project from a package into given directory
  depends              [why] Shows which packages cause the given package to be installed
  diagnose             Diagnoses the system to identify common errors
  dump-autoload        [dumpautoload] Dumps the autoloader
  exec                 Executes a vendored binary/script
  fund                 Discover how to help fund the maintenance of your dependencies
  global               Allows running commands in the global composer dir ($COMPOSER_HOME)
  help                 Display help for a command
  init                 Creates a basic composer.json file in current directory
  install              [i] Installs the project dependencies from the composer.lock file if present, or falls back on the composer.json
  licenses             Shows information about licenses of dependencies
  list                 List commands
  outdated             Shows a list of installed packages that have updates available, including their latest version
  prohibits            [why-not] Shows which packages prevent the given package from being installed
  reinstall            Uninstalls and reinstalls the given package names
  remove               [rm] Removes a package from the require or require-dev
  require              [r] Adds required packages to your composer.json and installs them
  run-script           [run] Runs the scripts defined in composer.json
  search               Searches for packages
  self-update          [selfupdate] Updates composer.phar to the latest version
  show                 [info] Shows information about packages
  status               Shows a list of locally modified packages
  suggests             Shows package suggestions
  update               [u|upgrade] Updates your dependencies to the latest version according to composer.json, and updates the composer.lock file
  validate             Validates a composer.json and composer.lock

[root@rese-ui]$ cd src
[root@src]$ touch .env.example
[root@src]$ cp .env.example .env #作成

※.env.exampleが存在しない場合は、
$ touch .env.example で作成し、githubの.envからコピーしてください。キーの部分は消してください。

[root@src]$ php artisan key:generate #キーの生成(エラーが出る場合は、composer installを実行)
[root@src]$ cat .env #.envファイルの中を見てキーが設定されているか確認

APP_NAME=Laravel
APP_ENV=local
APP_KEY=??????????????????????????= #ここ
APP_DEBUG=true
APP_URL=http://localhost

●DBの接続設定
※.env
#各RDSの設定内容を入力
DB_CONNECTION=mysql
DB_HOST=database-1.c9k9ndmu64fu.ap-northeast-1.rds.amazonaws.com
DB_PORT=3306
DB_DATABASE=database-1
DB_USERNAME=admin
DB_PASSWORD=masaru9090 #マスターパスワード

※/config/database.php

#env()で囲んである箇所は.envの内容を読み込むようになっていますが、第二引数に直接書き込んでも大丈夫です。
#RDSに登録したDBの内容はコンソールのRDS画面でDBを選択すれば確認ができます。

'default' => env('DB_CONNECTION', 'mysql'),

'mysql' => [
            'driver' => 'mysql',
            'url' => env('DATABASE_URL'),
            'host' => env('DB_HOST', 'database-1.c9k9ndmu64fu.ap-northeast-1.rds.amazonaws.com'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'database-1'),
            'username' => env('DB_USERNAME', 'admin'),
            'password' => env('DB_PASSWORD', 'masaru9090'),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => 'utf8mb4',
            'collation' => 'utf8mb4_unicode_ci',
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],

[root@src]$ php artisan migrate #作成
$ mysql -h database-1.c9k9ndmu64fu.ap-northeast-1.rds.amazonaws.com -P 3306 -u admin -p #mysqlログインして作成できているか確認

●アプリ起動確認
# nginxを再起動後パブリックIPv4DNSからアクセスし、アプリの画面が表示されるかブラウザで確認

●必要コマンドの実行・設定
[root@src]$ php artisan storage:link #シンボリックリンクを作成
[root@src]$ php artisan db:seed --class=UserSeeder #シード実行

●S3の設定
※.env
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=ap-northeast-1
AWS_BUCKET=rese-ui-s3

[root@src]$ php artisan cache:clear #.envの修正内容を反映させる為にキャッシュをクリア

・ここまで設定したら、ログイン画面からログインして各機能の動作確認をしてください。